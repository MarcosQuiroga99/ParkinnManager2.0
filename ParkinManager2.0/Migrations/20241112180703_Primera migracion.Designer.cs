// <auto-generated />
using System;
using Estacionamiento.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ParkinManager2._0.Migrations
{
    [DbContext(typeof(EstacionamientoContext))]
    [Migration("20241112180703_Primera migracion")]
    partial class Primeramigracion
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Estacionamiento.Models.Administrador", b =>
                {
                    b.Property<int>("Dni")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Dni"));

                    b.Property<string>("Apellido")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EstacionamientoId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FechaAlta")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FehcaNacimiento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Legajo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Dni");

                    b.HasIndex("EstacionamientoId")
                        .IsUnique();

                    b.ToTable("administradors");
                });

            modelBuilder.Entity("Estacionamiento.Models.Cliente", b =>
                {
                    b.Property<int>("Dni")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Dni"));

                    b.Property<string>("Apellido")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EstacionamientoId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FechaAlta")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FehcaNacimiento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VehiculoID")
                        .HasColumnType("int");

                    b.HasKey("Dni");

                    b.HasIndex("EstacionamientoId");

                    b.ToTable("cliente");
                });

            modelBuilder.Entity("Estacionamiento.Models.Estacionamiento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Direcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaxPlaza")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("tipoVehiculos")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("estacionamientos");
                });

            modelBuilder.Entity("Estacionamiento.Models.Plan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Precio")
                        .HasColumnType("float");

                    b.Property<int>("TipoPlan")
                        .HasColumnType("int");

                    b.Property<int>("TipoVehiculo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Plan");
                });

            modelBuilder.Entity("Estacionamiento.Models.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClienteId")
                        .HasColumnType("int");

                    b.Property<int>("EstacionamientoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Ingreso")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Salida")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Tarifa")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("VehiculoId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("EstacionamientoId");

                    b.HasIndex("VehiculoId")
                        .IsUnique();

                    b.ToTable("ticket");
                });

            modelBuilder.Entity("Estacionamiento.Models.Vehiculo", b =>
                {
                    b.Property<string>("Patente")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ClienteID")
                        .HasColumnType("int");

                    b.Property<int>("EstacionamientoId")
                        .HasColumnType("int");

                    b.Property<string>("Marca")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Modelo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TipoDeVehiculo")
                        .HasColumnType("int");

                    b.HasKey("Patente");

                    b.HasIndex("ClienteID");

                    b.HasIndex("EstacionamientoId");

                    b.ToTable("vehiculos");
                });

            modelBuilder.Entity("Estacionamiento.Models.Administrador", b =>
                {
                    b.HasOne("Estacionamiento.Models.Estacionamiento", "Estacionamiento")
                        .WithOne("Administrador")
                        .HasForeignKey("Estacionamiento.Models.Administrador", "EstacionamientoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Estacionamiento");
                });

            modelBuilder.Entity("Estacionamiento.Models.Cliente", b =>
                {
                    b.HasOne("Estacionamiento.Models.Estacionamiento", "Estacionamiento")
                        .WithMany("Clientes")
                        .HasForeignKey("EstacionamientoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Estacionamiento");
                });

            modelBuilder.Entity("Estacionamiento.Models.Ticket", b =>
                {
                    b.HasOne("Estacionamiento.Models.Cliente", "Cliente")
                        .WithMany("Tickets")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Estacionamiento.Models.Estacionamiento", "Estacionamiento")
                        .WithMany("Tickets")
                        .HasForeignKey("EstacionamientoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Estacionamiento.Models.Vehiculo", "Vehiculo")
                        .WithOne("Ticket")
                        .HasForeignKey("Estacionamiento.Models.Ticket", "VehiculoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("Estacionamiento");

                    b.Navigation("Vehiculo");
                });

            modelBuilder.Entity("Estacionamiento.Models.Vehiculo", b =>
                {
                    b.HasOne("Estacionamiento.Models.Cliente", "Dueño")
                        .WithMany("Vehiculos")
                        .HasForeignKey("ClienteID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Estacionamiento.Models.Estacionamiento", "Estacionamiento")
                        .WithMany("Plaza")
                        .HasForeignKey("EstacionamientoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dueño");

                    b.Navigation("Estacionamiento");
                });

            modelBuilder.Entity("Estacionamiento.Models.Cliente", b =>
                {
                    b.Navigation("Tickets");

                    b.Navigation("Vehiculos");
                });

            modelBuilder.Entity("Estacionamiento.Models.Estacionamiento", b =>
                {
                    b.Navigation("Administrador");

                    b.Navigation("Clientes");

                    b.Navigation("Plaza");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Estacionamiento.Models.Vehiculo", b =>
                {
                    b.Navigation("Ticket");
                });
#pragma warning restore 612, 618
        }
    }
}
